package dynaml

type DynamlGrammar Peg {}

Dynaml <- (Prefer / Template / Expression) !.
Prefer <- ws 'prefer' req_ws Expression
Template <- ws '&template' ws
Expression <- ws ( LambdaExpr / Level7 ) ws

Level7 <- Level6 ( req_ws Or )*
Or <- '||' req_ws Level6

Level6 <- Conditional / Level5
Conditional <- Level5 ws '?' Expression ':' Expression

Level5 <- Level4 ( Concatenation )*
Concatenation <- req_ws Level4

Level4 <- Level3 ( req_ws ( LogOr / LogAnd ) )*
LogOr <- '-or' req_ws Level3
LogAnd <- '-and' req_ws Level3

Level3 <- Level2 ( req_ws Comparison )*
Comparison <- CompareOp req_ws Level2
CompareOp <- '==' / '!=' / '<=' / '>=' / '>' / '<' / '>'

Level2 <-  Level1 ( req_ws ( Addition / Subtraction ) )*
Addition <- '+' req_ws Level1
Subtraction <- '-' req_ws Level1

Level1 <- Level0 ( req_ws ( Multiplication / Division / Modulo ) )*
Multiplication <- '*' req_ws Level0
Division <-  '/' req_ws Level0
Modulo <-  '%' req_ws Level0

Level0 <- String / Integer / Boolean / Nil / Not /
          Substitution / Merge / Auto / Lambda / Chained 

Chained <- (( Mapping / List / Range / ( Grouped / Reference ) ChainedCall* ) ) ( ChainedQualifiedExpression ChainedCall+)* ChainedQualifiedExpression?
ChainedQualifiedExpression <- '.' FollowUpRef 
ChainedCall <- '(' Arguments ')'
Arguments <- Expression (NextExpression)*
NextExpression <- ',' Expression

Substitution <- '*' Level0
Not <- '!' ws Level0
Grouped <- '(' Expression ')'
Range <- '[' Expression '..' Expression ']'

Integer <- '-'? [0-9] [0-9_]*
String <- '"' ('\\"' / !'"' .)* '"'
Boolean <- 'true' / 'false'
Nil <- 'nil' / '~'

List <- '[' Contents? ']'
Contents <- Expression (NextExpression)*

Merge <- RefMerge / SimpleMerge
RefMerge <- 'merge' !( req_ws Required ) ( req_ws (Replace / On ))? req_ws Reference
SimpleMerge <- 'merge' ( req_ws (Replace/Required/On) )?
Replace <- 'replace'
Required <- 'required'
On <- 'on' req_ws Name

Auto <- 'auto'

Mapping <- 'map[' Level7 ( LambdaExpr / ( '|' Expression )) ']'
Lambda <- 'lambda' ( LambdaRef / LambdaExpr )
LambdaRef <- req_ws Expression
LambdaExpr <- ws '|' ws Name (NextName)* ws '|' ws '->' Expression
NextName <- ws ',' ws Name
Name <- [a-zA-Z0-9_]+

Reference <- '.'? Key ( '.' ( Key / Index) )*
FollowUpRef <- ( Key / Index) ( '.' ( Key / Index) )*

Key <- [a-zA-Z0-9_] [a-zA-Z0-9_\-]* ( ':' [a-zA-Z0-9_] [a-zA-Z0-9_\-]* )?
Index <- '[' [0-9]+ ']'

ws <- [ \t\n\r]*

req_ws <- [ \t\n\r]+
